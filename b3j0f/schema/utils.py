# -*- coding: utf-8 -*-

# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2016 Jonathan Labéjof <jonathan.labejof@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

"""Base schema package."""

__all__ = ['MetaSchema', 'Schema', 'clsschemamaker', 'dynamicvalue']

from b3j0f.utils.version import OrderedDict

from types import FunctionType, MethodType

from inspect import getmembers, isclass

from six import get_unbound_function, add_metaclass, iteritems

from uuid import uuid4

from .registry import getbydatatype
from .factory import make


class DynamicValue(object):
    """Handle a function in order to dynamically lead a value while cleaning a
    schema.

    For example, the schema attribute ``uuid`` uses a DynamicValue in order to
    ensure default generation per instanciation."""

    __slots__ = ['func']

    def __init__(self, func, *args, **kwargs):
        """
        :param func: function to execute while cleaning a schema."""

        super(DynamicValue, self).__init__(*args, **kwargs)

        self.func = func

    def __call__(self):

        return self.func()


def fromobj(
        obj, _force=False, _besteffort=True, registry=None, factory=None,
        *args, **kwargs
):
    """Get the schema able to instanciate input object.

    The default value of schema will be obj.

    :param obj: object possibly generated by a schema.
    :param bool _force: if True (False by default), create the object schema
        on the fly if it does not exist.
    :param bool _besteffort: if True (default), find a schema class able to
        validate object class by inheritance.
    :param SchemaRegistry registry: default registry to use. Global by default.
    :param SchemaFactory factory: default factory to use. Global by default.
    :param args: schema class vargs.
    :param kwargs: schema class kwargs.
    :return: Schema.
    :rtype: Schema."""

    result = None

    fobj = obj() if isinstance(obj, DynamicValue) else obj

    cls = type(fobj)

    if registry is not None:
        getbydatatype = registry.getbydatatype

    else:
        getbydatatype = globals()['getbydatatype']

    schemacls = getbydatatype(cls, besteffort=_besteffort)

    if schemacls is None and _force:
        if factory is not None:
            make = factory.make

        else:
            make = globals()['make']

        schemacls = make(cls)

    if schemacls:
        result = schemacls(default=obj, *args, **kwargs)

    return result
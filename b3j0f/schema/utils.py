# -*- coding: utf-8 -*-

# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2016 Jonathan Labéjof <jonathan.labejof@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

"""Schema utilities package."""

__all__ = ['DynamicValue', 'obj2schema']

from types import FunctionType, MethodType

from .registry import getbydatatype
from .lang.factory import build


class DynamicValue(object):
    """Handle a function in order to dynamically lead a value while cleaning a
    schema.

    For example, the schema attribute ``uuid`` uses a DynamicValue in order to
    ensure default generation per instanciation."""

    __slots__ = ['func']

    def __init__(self, func, *args, **kwargs):
        """
        :param func: function to execute while cleaning a schema."""

        super(DynamicValue, self).__init__(*args, **kwargs)

        self.func = func

    def __call__(self):

        return self.func()


def obj2schema(
        obj, _force=False, _besteffort=True, _registry=None, _factory=None,
        *args, **kwargs
):
    """Get the schema able to instanciate input object.

    The default value of schema will be obj.

    :param obj: object possibly generated by a schema.
    :param bool _force: if True (False by default), create the object schema
        on the fly if it does not exist.
    :param bool _besteffort: if True (default), find a schema class able to
        validate object class by inheritance.
    :param SchemaRegistry _registry: default registry to use. Global by default.
    :param SchemaFactory factory: default factory to use. Global by default.
    :param args: schema class vargs.
    :param kwargs: schema class kwargs.
    :return: Schema.
    :rtype: Schema."""

    result = None

    fobj = obj() if isinstance(obj, DynamicValue) else obj

    cls = type(fobj)

    gbdt = getbydatatype if _registry is None else _registry.getbydatatype

    schemacls = gbdt(cls, besteffort=_besteffort)

    if schemacls is None and _force:
        fbuild = build if _factory is None else _factory.build

        schemacls = fbuild(cls)

    if schemacls:
        result = schemacls(default=obj, *args, **kwargs)

    return result


class This(object):
    """Tool Used to set inner schemas with the same type with specific arguments
    .

    This one might be use at the condition instanciation methods must not
    reference the class.

    ..example::

        class Test(Schema):
            # contain an inner schema nullable 'test' of type Test.
            test = This(nullable=False)

            def __init__(self, *args, **kwargs):

                # old style call because when the schema will be automatically
                # updated, the class Test does not exist in the scope
                Schema.__init__(self, *args, **kwargs)

    :param args: schema class vargs to use.
    :param kwargs: schema class kwargs to use.

    :return: input args and kwargs.
    :rtype: tuple"""

    def __init__(self, *args, **kwargs):

        super(This, self).__init__()

        self.args = args
        self.kwargs = kwargs
